/*
    In the name ALLAH
*/
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.TransferHandler;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ss
 */
public class myGameFrame extends javax.swing.JFrame {

    /**
     * Creates new form myGameFrame
     */
    ThreeCard [] array = new ThreeCard[5]; 
       
    private int counter = 0;
    ThreeCard threeCard1 , threeCard2 , threeCard3 , threeCard4;
    myTransferHandler mytransporthandler; 
    object_card card2 , card3 , card4 , card5 , card6 , card7 , card8 , card9 , card10 , card11 , card12 , card13 , card14;
    object_card [] carrd = new object_card [55];
    HashMap < ThreeCard , Integer > ThreeCardMap = new HashMap < ThreeCard , Integer > ();
    ThreeCardSort Sort;
    DeckOfCards newDeck;
    
                    //ThreeCard strray[] = new ThreeCard [5]; ///  array to sort;
                    
    public myGameFrame() throws IOException {
        initComponents();
        newDeck = new DeckOfCards ();
        carrd = newDeck.carrd;
        userPoint = 0;
        northPoint= 0; 
        westPoint = 0; 
        eastPoint = 0;
        mytransporthandler = new myTransferHandler ("icon"); 
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        a = new javax.swing.JLabel();
        f = new javax.swing.JLabel();
        c = new javax.swing.JLabel();
        d = new javax.swing.JLabel();
        e = new javax.swing.JLabel();
        g = new javax.swing.JLabel();
        h = new javax.swing.JLabel();
        i = new javax.swing.JLabel();
        b = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        MakerLabel1 = new javax.swing.JLabel();
        MakerLabel2 = new javax.swing.JLabel();
        MakerLabel3 = new javax.swing.JLabel();
        MakerLabel4 = new javax.swing.JLabel();
        MakerLabel5 = new javax.swing.JLabel();
        MakerLabel6 = new javax.swing.JLabel();
        MakerLabel7 = new javax.swing.JLabel();
        MakerLabel8 = new javax.swing.JLabel();
        MakerLabel9 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        myFirstThreeCardLabelNo2 = new javax.swing.JLabel();
        myFirstThreeCardLabelNo1 = new javax.swing.JLabel();
        myFirstThreeCardLabelNo = new javax.swing.JLabel();
        EastChalLabel1 = new javax.swing.JLabel();
        EastChalLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        EastChalLabel = new javax.swing.JLabel();
        em = new javax.swing.JLabel();
        ef = new javax.swing.JLabel();
        ek = new javax.swing.JLabel();
        ej = new javax.swing.JLabel();
        eh = new javax.swing.JLabel();
        ei = new javax.swing.JLabel();
        eg = new javax.swing.JLabel();
        ed = new javax.swing.JLabel();
        ee = new javax.swing.JLabel();
        Nc = new javax.swing.JLabel();
        Nd = new javax.swing.JLabel();
        Ne = new javax.swing.JLabel();
        Nf = new javax.swing.JLabel();
        Nh = new javax.swing.JLabel();
        Ng = new javax.swing.JLabel();
        Ni = new javax.swing.JLabel();
        NL = new javax.swing.JLabel();
        Nj = new javax.swing.JLabel();
        k = new javax.swing.JLabel();
        J = new javax.swing.JLabel();
        L = new javax.swing.JLabel();
        testlud = new javax.swing.JLabel();
        MakerLabel12 = new javax.swing.JLabel();
        MakerLabel11 = new javax.swing.JLabel();
        MakerLabel10 = new javax.swing.JLabel();
        m = new javax.swing.JLabel();
        el = new javax.swing.JLabel();
        testllr = new javax.swing.JLabel();
        eb = new javax.swing.JLabel();
        ec = new javax.swing.JLabel();
        wn = new javax.swing.JLabel();
        wm = new javax.swing.JLabel();
        wk = new javax.swing.JLabel();
        wj = new javax.swing.JLabel();
        wh = new javax.swing.JLabel();
        wd = new javax.swing.JLabel();
        wc = new javax.swing.JLabel();
        we = new javax.swing.JLabel();
        wf = new javax.swing.JLabel();
        wL = new javax.swing.JLabel();
        wb = new javax.swing.JLabel();
        wa = new javax.swing.JLabel();
        wi = new javax.swing.JLabel();
        Na = new javax.swing.JLabel();
        Nb = new javax.swing.JLabel();
        Nn = new javax.swing.JLabel();
        Nm = new javax.swing.JLabel();
        NorthChalLabel1 = new javax.swing.JLabel();
        NorthChalLabel2 = new javax.swing.JLabel();
        NorthChalLabel = new javax.swing.JLabel();
        WestChalLabel = new javax.swing.JLabel();
        WestChalLabel2 = new javax.swing.JLabel();
        WestChalLabel3 = new javax.swing.JLabel();
        MakerLabel13 = new javax.swing.JLabel();
        ea = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        myFirstThreeCardLabelNo3 = new javax.swing.JLabel();
        NorthChalLabel3 = new javax.swing.JLabel();
        WestChalLabel1 = new javax.swing.JLabel();
        EastChalLabelT = new javax.swing.JLabel();
        EastLabel = new javax.swing.JLabel();
        Direction = new javax.swing.JLabel();

        jLabel10.setIcon(new javax.swing.ImageIcon("C:\\Users\\ss\\Desktop\\Capture.PNG")); // NOI18N
        jLabel10.setText("jLabel1");
        jLabel10.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel10MouseDragged(evt);
            }
        });

        jLabel11.setIcon(new javax.swing.ImageIcon("C:\\Users\\ss\\Desktop\\Capture.PNG")); // NOI18N
        jLabel11.setText("jLabel1");
        jLabel11.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel11MouseDragged(evt);
            }
        });

        jLabel12.setIcon(new javax.swing.ImageIcon("C:\\Users\\ss\\Desktop\\Capture.PNG")); // NOI18N
        jLabel12.setText("jLabel1");
        jLabel12.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel12MouseDragged(evt);
            }
        });

        jLabel19.setIcon(new javax.swing.ImageIcon("C:\\Users\\ss\\Desktop\\Capture.PNG")); // NOI18N
        jLabel19.setText("jLabel1");
        jLabel19.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel19MouseDragged(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon("C:\\Users\\ss\\Desktop\\Capture.PNG")); // NOI18N
        jLabel20.setText("jLabel1");
        jLabel20.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel20MouseDragged(evt);
            }
        });

        jLabel21.setIcon(new javax.swing.ImageIcon("C:\\Users\\ss\\Desktop\\Capture.PNG")); // NOI18N
        jLabel21.setText("jLabel1");
        jLabel21.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel21MouseDragged(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        a.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        a.setText("jLabel1");
        a.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                aMouseDragged(evt);
            }
        });
        getContentPane().add(a);
        a.setBounds(160, 430, 63, 86);

        f.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        f.setText("jLabel1");
        f.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                fMouseDragged(evt);
            }
        });
        getContentPane().add(f);
        f.setBounds(510, 430, 63, 86);

        c.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        c.setText("jLabel1");
        c.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                cMouseDragged(evt);
            }
        });
        getContentPane().add(c);
        c.setBounds(300, 430, 63, 86);

        d.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        d.setText("jLabel1");
        d.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                dMouseDragged(evt);
            }
        });
        getContentPane().add(d);
        d.setBounds(370, 430, 63, 86);

        e.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        e.setText("jLabel1");
        e.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                eMouseDragged(evt);
            }
        });
        getContentPane().add(e);
        e.setBounds(440, 430, 63, 86);

        g.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        g.setText("jLabel1");
        g.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                gMouseDragged(evt);
            }
        });
        getContentPane().add(g);
        g.setBounds(580, 430, 63, 86);

        h.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        h.setText("jLabel1");
        h.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                hMouseDragged(evt);
            }
        });
        getContentPane().add(h);
        h.setBounds(650, 430, 63, 86);

        i.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        i.setText("jLabel1");
        i.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                iMouseDragged(evt);
            }
        });
        getContentPane().add(i);
        i.setBounds(720, 430, 63, 86);

        b.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        b.setText("jLabel1");
        b.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                bMouseDragged(evt);
            }
        });
        getContentPane().add(b);
        b.setBounds(230, 430, 63, 86);

        jButton1.setIcon(new javax.swing.ImageIcon("C:\\Users\\ss\\Desktop\\deal.png")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(540, 610, 100, 41);

        MakerLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel1.setText("jLabel1");
        MakerLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel1MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel1);
        MakerLabel1.setBounds(120, 330, 63, 86);

        MakerLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel2.setText("jLabel1");
        MakerLabel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel2MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel2);
        MakerLabel2.setBounds(190, 330, 63, 86);

        MakerLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel3.setText("jLabel1");
        MakerLabel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel3MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel3);
        MakerLabel3.setBounds(260, 330, 63, 86);

        MakerLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel4.setText("jLabel1");
        MakerLabel4.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel4MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel4);
        MakerLabel4.setBounds(350, 330, 63, 86);

        MakerLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel5.setText("jLabel1");
        MakerLabel5.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel5MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel5);
        MakerLabel5.setBounds(420, 330, 63, 86);

        MakerLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel6.setText("jLabel1");
        MakerLabel6.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel6MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel6);
        MakerLabel6.setBounds(490, 330, 63, 86);

        MakerLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel7.setText("jLabel1");
        MakerLabel7.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel7MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel7);
        MakerLabel7.setBounds(580, 330, 63, 86);

        MakerLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel8.setText("jLabel1");
        MakerLabel8.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel8MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel8);
        MakerLabel8.setBounds(650, 330, 63, 86);

        MakerLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel9.setText("jLabel1");
        MakerLabel9.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel9MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel9);
        MakerLabel9.setBounds(720, 330, 63, 86);

        jButton2.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 51, 153));
        jButton2.setText("Done");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(430, 610, 94, 41);

        myFirstThreeCardLabelNo2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(myFirstThreeCardLabelNo2);
        myFirstThreeCardLabelNo2.setBounds(590, 220, 63, 94);

        myFirstThreeCardLabelNo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(myFirstThreeCardLabelNo1);
        myFirstThreeCardLabelNo1.setBounds(530, 220, 63, 94);
        getContentPane().add(myFirstThreeCardLabelNo);
        myFirstThreeCardLabelNo.setBounds(710, 220, 63, 90);

        EastChalLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(EastChalLabel1);
        EastChalLabel1.setBounds(760, 160, 63, 94);

        EastChalLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(EastChalLabel2);
        EastChalLabel2.setBounds(820, 160, 63, 94);

        jButton3.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(102, 204, 0));
        jButton3.setText("Chal");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(660, 610, 95, 41);

        jButton4.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 255));
        jButton4.setText("Deal");
        getContentPane().add(jButton4);
        jButton4.setBounds(770, 610, 102, 41);
        getContentPane().add(EastChalLabel);
        EastChalLabel.setBounds(940, 160, 63, 90);

        em.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        em.setText("jLabel13");
        getContentPane().add(em);
        em.setBounds(1140, 570, 86, 43);

        ef.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        ef.setText("jLabel13");
        getContentPane().add(ef);
        ef.setBounds(1140, 290, 86, 43);

        ek.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        ek.setText("jLabel13");
        getContentPane().add(ek);
        ek.setBounds(1140, 490, 86, 43);

        ej.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        ej.setText("jLabel13");
        getContentPane().add(ej);
        ej.setBounds(1140, 450, 86, 43);

        eh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        eh.setText("jLabel13");
        getContentPane().add(eh);
        eh.setBounds(1140, 370, 86, 43);

        ei.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        ei.setText("jLabel13");
        getContentPane().add(ei);
        ei.setBounds(1140, 410, 86, 43);

        eg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        eg.setText("jLabel13");
        getContentPane().add(eg);
        eg.setBounds(1140, 330, 86, 43);

        ed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        ed.setText("jLabel13");
        getContentPane().add(ed);
        ed.setBounds(1140, 210, 86, 43);

        ee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        ee.setText("jLabel13");
        getContentPane().add(ee);
        ee.setBounds(1140, 250, 86, 43);

        Nc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(Nc);
        Nc.setBounds(350, 0, 63, 94);

        Nd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(Nd);
        Nd.setBounds(410, 0, 63, 94);

        Ne.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        Ne.setText("jLabel13");
        getContentPane().add(Ne);
        Ne.setBounds(470, 0, 63, 94);

        Nf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(Nf);
        Nf.setBounds(530, 0, 63, 94);

        Nh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        Nh.setText("jLabel13");
        getContentPane().add(Nh);
        Nh.setBounds(650, 0, 63, 94);

        Ng.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(Ng);
        Ng.setBounds(590, 0, 63, 94);

        Ni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(Ni);
        Ni.setBounds(710, 0, 63, 94);

        NL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        NL.setText("jLabel13");
        getContentPane().add(NL);
        NL.setBounds(830, 0, 63, 94);

        Nj.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(Nj);
        Nj.setBounds(770, 0, 63, 94);

        k.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        k.setText("jLabel1");
        k.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                kMouseDragged(evt);
            }
        });
        getContentPane().add(k);
        k.setBounds(860, 430, 63, 86);

        J.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        J.setText("jLabel1");
        J.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                JMouseDragged(evt);
            }
        });
        getContentPane().add(J);
        J.setBounds(790, 430, 63, 86);

        L.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        L.setText("jLabel1");
        L.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                LMouseDragged(evt);
            }
        });
        getContentPane().add(L);
        L.setBounds(930, 430, 63, 86);

        testlud.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                testludMouseDragged(evt);
            }
        });
        getContentPane().add(testlud);
        testlud.setBounds(560, 560, 63, 86);

        MakerLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel12.setText("jLabel1");
        MakerLabel12.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel12MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel12);
        MakerLabel12.setBounds(960, 330, 63, 86);

        MakerLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel11.setText("jLabel1");
        MakerLabel11.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel11MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel11);
        MakerLabel11.setBounds(890, 330, 63, 86);

        MakerLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel10.setText("jLabel1");
        MakerLabel10.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel10MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel10);
        MakerLabel10.setBounds(820, 330, 63, 86);

        m.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        m.setText("jLabel1");
        m.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                mMouseDragged(evt);
            }
        });
        getContentPane().add(m);
        m.setBounds(1000, 430, 63, 86);

        el.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        el.setText("jLabel13");
        getContentPane().add(el);
        el.setBounds(1140, 530, 86, 43);
        getContentPane().add(testllr);
        testllr.setBounds(550, 580, 86, 43);

        eb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        eb.setText("jLabel13");
        getContentPane().add(eb);
        eb.setBounds(1140, 130, 86, 43);

        ec.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        ec.setText("jLabel13");
        getContentPane().add(ec);
        ec.setBounds(1140, 170, 86, 43);

        wn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wn.setText("jLabel13");
        getContentPane().add(wn);
        wn.setBounds(10, 570, 86, 43);

        wm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wm.setText("jLabel13");
        getContentPane().add(wm);
        wm.setBounds(10, 530, 86, 43);

        wk.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wk.setText("jLabel13");
        getContentPane().add(wk);
        wk.setBounds(10, 450, 86, 43);

        wj.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wj.setText("jLabel13");
        getContentPane().add(wj);
        wj.setBounds(10, 410, 86, 43);

        wh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wh.setText("jLabel13");
        getContentPane().add(wh);
        wh.setBounds(10, 330, 86, 43);

        wd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wd.setText("jLabel13");
        getContentPane().add(wd);
        wd.setBounds(10, 210, 86, 43);

        wc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wc.setText("jLabel13");
        getContentPane().add(wc);
        wc.setBounds(10, 170, 86, 43);

        we.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        we.setText("jLabel13");
        getContentPane().add(we);
        we.setBounds(10, 250, 86, 43);

        wf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wf.setText("jLabel13");
        getContentPane().add(wf);
        wf.setBounds(10, 290, 86, 43);

        wL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wL.setText("jLabel13");
        getContentPane().add(wL);
        wL.setBounds(10, 490, 86, 43);

        wb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wb.setText("jLabel13");
        getContentPane().add(wb);
        wb.setBounds(10, 130, 86, 43);

        wa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wa.setText("jLabel13");
        getContentPane().add(wa);
        wa.setBounds(10, 90, 86, 43);

        wi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        wi.setText("jLabel13");
        getContentPane().add(wi);
        wi.setBounds(10, 370, 86, 43);

        Na.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(Na);
        Na.setBounds(230, 0, 63, 94);

        Nb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(Nb);
        Nb.setBounds(290, 0, 63, 94);

        Nn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        Nn.setText("jLabel13");
        getContentPane().add(Nn);
        Nn.setBounds(950, 0, 63, 94);

        Nm.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(Nm);
        Nm.setBounds(890, 0, 63, 94);

        NorthChalLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(NorthChalLabel1);
        NorthChalLabel1.setBounds(530, 100, 63, 94);

        NorthChalLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(NorthChalLabel2);
        NorthChalLabel2.setBounds(590, 100, 63, 94);
        getContentPane().add(NorthChalLabel);
        NorthChalLabel.setBounds(710, 100, 63, 90);
        getContentPane().add(WestChalLabel);
        WestChalLabel.setBounds(300, 160, 63, 90);

        WestChalLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(WestChalLabel2);
        WestChalLabel2.setBounds(420, 160, 63, 94);

        WestChalLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(WestChalLabel3);
        WestChalLabel3.setBounds(480, 160, 63, 94);

        MakerLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        MakerLabel13.setText("jLabel1");
        MakerLabel13.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                MakerLabel13MouseDragged(evt);
            }
        });
        getContentPane().add(MakerLabel13);
        MakerLabel13.setBounds(1030, 330, 63, 86);

        ea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lremptycard.PNG"))); // NOI18N
        ea.setText("jLabel13");
        getContentPane().add(ea);
        ea.setBounds(1140, 90, 86, 43);

        jButton5.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 102, 102));
        jButton5.setText("Show");
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(323, 610, 90, 40);

        myFirstThreeCardLabelNo3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        myFirstThreeCardLabelNo3.setText("jLabel13");
        getContentPane().add(myFirstThreeCardLabelNo3);
        myFirstThreeCardLabelNo3.setBounds(650, 220, 63, 94);

        NorthChalLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(NorthChalLabel3);
        NorthChalLabel3.setBounds(650, 100, 63, 94);

        WestChalLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(WestChalLabel1);
        WestChalLabel1.setBounds(360, 160, 63, 94);

        EastChalLabelT.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture.PNG"))); // NOI18N
        getContentPane().add(EastChalLabelT);
        EastChalLabelT.setBounds(700, 160, 63, 94);
        getContentPane().add(EastLabel);
        EastLabel.setBounds(880, 160, 63, 86);
        getContentPane().add(Direction);
        Direction.setBounds(540, 190, 160, 30);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
                    
    }//GEN-LAST:event_aMouseDragged

    private void bMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_bMouseDragged

    private void cMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_cMouseDragged

    private void dMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_dMouseDragged

    private void eMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_eMouseDragged

    private void fMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_fMouseDragged

    private void gMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_gMouseDragged

    private void hMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_hMouseDragged

    private void iMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_iMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_iMouseDragged
    private boolean flags = false;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        northPoint = 0; 
        eastPoint = 0; 
        westPoint = 0; 
        userPoint = 0;
        array[0] = null; 
        array[1] = null; 
        array[2] = null; 
        counter = 0; /// this counter varriable will count the round  that means it will count each chal
        try {
            MakerLabel1.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel2.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel3.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel4.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel5.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel6.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel7.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel8.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel9.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            
            MakerLabel10.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel11.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel12.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            MakerLabel13.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
            if (flags == true) {
                myFirstThreeCardLabelNo1.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                myFirstThreeCardLabelNo2.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                myFirstThreeCardLabelNo3.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                myFirstThreeCardLabelNo.setIcon(null);

                /// reset the chal label ////

                EastChalLabel1.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                EastChalLabel2.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                EastChalLabelT.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                EastChalLabel.setIcon(null);
                EastLabel.setIcon (null);

                NorthChalLabel1.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                NorthChalLabel2.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                NorthChalLabel3.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                NorthChalLabel.setIcon(null);


                WestChalLabel1.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                WestChalLabel2.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                WestChalLabel3.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                WestChalLabel.setIcon(null);
            }
            flags = true;
        } catch (IOException ex) {
            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        a.setTransferHandler(mytransporthandler);
        f.setTransferHandler(mytransporthandler);
        c.setTransferHandler(mytransporthandler);
        d.setTransferHandler(mytransporthandler);
        e.setTransferHandler(mytransporthandler);
        g.setTransferHandler(mytransporthandler);
        h.setTransferHandler(mytransporthandler);
        i.setTransferHandler(mytransporthandler);
        b.setTransferHandler(mytransporthandler);
        J.setTransferHandler(mytransporthandler);
        k.setTransferHandler(mytransporthandler);
        L.setTransferHandler(mytransporthandler);
        m.setTransferHandler(mytransporthandler);
        MakerLabel1.setTransferHandler(mytransporthandler);
        MakerLabel2.setTransferHandler(mytransporthandler);
        MakerLabel3.setTransferHandler(mytransporthandler);
        MakerLabel4.setTransferHandler(mytransporthandler);
        MakerLabel5.setTransferHandler(mytransporthandler);
        MakerLabel6.setTransferHandler(mytransporthandler);
        MakerLabel7.setTransferHandler(mytransporthandler);
        MakerLabel8.setTransferHandler(mytransporthandler);
        MakerLabel9.setTransferHandler(mytransporthandler);
        MakerLabel10.setTransferHandler(mytransporthandler);
        MakerLabel11.setTransferHandler(mytransporthandler);
        MakerLabel12.setTransferHandler(mytransporthandler);
        MakerLabel13.setTransferHandler(mytransporthandler);
        
        Thread thread = new Thread () {
            private int xud = 560 , yud = 560; 
            private int xlr = 550 , ylr = 580;
            
            public void run () {
                int fromSouth = 40 , fromEastWest = 50;
                int fromNort = 33; 
               for (int j = 0; j < 13; j++) {
                   for (int i = 1; i < 11; i++) {
                       try {
                           testlud.setIcon(new ImageIcon (ImageIO.read (new File ("reverseCard.png"))));
                       } catch (IOException ex) {
                           Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                       }
                       testlud.setBounds(xud - (fromSouth * i) , yud - (13 * i) , 63 , 86);

                        try {
                            sleep (15); 
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                         
                    }
                    try {
                        if (j == 0) {
                            a.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 1) {
                            b.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 2) {
                            c.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 3) {
                            d.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 4) {
                            e.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 5) {
                            f.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 6) {
                            g.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 7) {
                            h.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 8) {
                            i.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 9) {
                            J.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 10) {
                            k.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 11) {
                            L.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 12) {
                            m.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                   fromSouth -= 7;
                    
                    for (int i = 1; i < 11; i++) {
                       try {
                           testllr.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                       } catch (IOException ex) {
                           Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                       }
                        if (j == 0) {
                            testllr.setBounds(xlr + (59 * i) , ylr - 10 , 86 , 43);
                        }
                        else {
                            testllr.setBounds(xlr + (59 * i) , ylr - ( i * (fromEastWest / 10)) , 86 , 43);
                        }
                        try {
                            sleep (15); 
                        } catch (Exception e) {
                            e.printStackTrace (); 
                        }
                    }
                    try {
                        if (j == 0) {
                            em.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 1) {
                            el.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 2) {
                            ek.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 3) {
                            ej.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 4) {
                            ei.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 5) {
                            eh.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 6) {
                            eg.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 7) {
                            ef.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 8) {
                            ee.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 9) {
                            ed.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 10) {
                            ec.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 11) {
                            eb.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 12) {
                            ea.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    for (int i = 1; i < 11; i++) {
                        try {
                           testlud.setIcon(new ImageIcon (ImageIO.read (new File ("reverseCard.png"))));
                       } catch (IOException ex) {
                           Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                       }
                        testlud.setBounds(xud - (i * fromNort) , yud - (56 * i) , 63 , 86);
                        try {
                            sleep (15); 
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    try {
                        if (j == 0) {
                            Na.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 1) {
                            Nb.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 2) {
                            Nc.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 3) {
                            Nd.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 4) {
                            Ne.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 5) {
                            Nf.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 6) {
                            Ng.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 7) {
                            Nh.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 8) {
                            Ni.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 9) {
                            Nj.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 10) {
                            NL.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 11) {
                            Nm.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                        if (j == 12) {
                            Nn.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCard.png"))));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    fromNort -= 6;
                    
                    for (int i = 1; i < 11; i++) {
                        try {
                           testllr.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                       } catch (IOException ex) {
                           Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                       }
                        if (j == 0) {
                            testllr.setBounds(xlr - (54 * i) , ylr - 10 , 86 , 43);
                        }
                        else {
                            testllr.setBounds(xlr - (54 * i) , ylr - ( i * (fromEastWest / 10)) , 86 , 43);
                        }
                        try {
                            sleep (15); 
                        } catch (Exception e) {
                            e.printStackTrace (); 
                        }
                    }
                      try {
                        if (j == 0) {
                            wn.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 1) {
                            wm.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 2) {
                            wL.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 3) {
                            wk.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 4) {
                            wj.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 5) {
                            wi.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 6) {
                            wh.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 7) {
                            wf.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 8) {
                            we.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 9) {
                            wd.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 10) {
                            wc.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 11) {
                            wb.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                        if (j == 12) {
                            wa.setIcon(new ImageIcon (ImageIO.read(new File ("reverseCardlr.png"))));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (j > 0) {
                        fromEastWest += 40;
                    }
                    
                    testlud.setBounds(xud , yud , 63 , 86);
                    testllr.setBounds(xlr , ylr , 86 , 43);
               }
               
               
               testlud.setIcon(null);
               testllr.setIcon(null);
           } 
        }; 
        thread.start();
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel10MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel10MouseDragged

    private void jLabel11MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel11MouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel11MouseDragged

    private void jLabel12MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel12MouseDragged

    private void MakerLabel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel1MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
    }//GEN-LAST:event_MakerLabel1MouseDragged

    private void MakerLabel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel2MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
    }//GEN-LAST:event_MakerLabel2MouseDragged

    private void MakerLabel3MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel3MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
    }//GEN-LAST:event_MakerLabel3MouseDragged

    private void MakerLabel4MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel4MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
    }//GEN-LAST:event_MakerLabel4MouseDragged

    private void MakerLabel5MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel5MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
    }//GEN-LAST:event_MakerLabel5MouseDragged

    private void MakerLabel6MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel6MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
    }//GEN-LAST:event_MakerLabel6MouseDragged

    private void jLabel19MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel19MouseDragged

    private void jLabel20MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel20MouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel20MouseDragged

    private void jLabel21MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel21MouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel21MouseDragged

    private void MakerLabel7MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel7MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
    }//GEN-LAST:event_MakerLabel7MouseDragged

    private void MakerLabel8MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel8MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
    }//GEN-LAST:event_MakerLabel8MouseDragged

    private void MakerLabel9MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel9MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
    }//GEN-LAST:event_MakerLabel9MouseDragged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        MakerLabel1.setTransferHandler(null);
        MakerLabel2.setTransferHandler(null);
        MakerLabel3.setTransferHandler(null);
        MakerLabel4.setTransferHandler(null);
        MakerLabel5.setTransferHandler(null);
        MakerLabel6.setTransferHandler(null);
        MakerLabel7.setTransferHandler(null);
        MakerLabel8.setTransferHandler(null);
        MakerLabel9.setTransferHandler(null);
        MakerLabel10.setTransferHandler(null);
        MakerLabel11.setTransferHandler(null); 
        MakerLabel12.setTransferHandler(null);
        MakerLabel13.setTransferHandler(null);
        ImageIcon testIcon1 = (ImageIcon) MakerLabel1.getIcon();
        ImageIcon testIcon2 = (ImageIcon) MakerLabel2.getIcon(); 
        ImageIcon testIcon3 = (ImageIcon) MakerLabel3.getIcon();
        ImageIcon testIcon4 = (ImageIcon) MakerLabel4.getIcon(); 
        ImageIcon testIcon5 = (ImageIcon) MakerLabel5.getIcon();
        ImageIcon testIcon6 = (ImageIcon) MakerLabel6.getIcon(); 
        ImageIcon testIcon7 = (ImageIcon) MakerLabel7.getIcon();
        ImageIcon testIcon8 = (ImageIcon) MakerLabel8.getIcon(); 
        ImageIcon testIcon9 = (ImageIcon) MakerLabel9.getIcon();
        ImageIcon testIcon10 = (ImageIcon) MakerLabel10.getIcon(); 
        ImageIcon testIcon11 = (ImageIcon) MakerLabel11.getIcon();
        ImageIcon testIcon12 = (ImageIcon) MakerLabel12.getIcon(); 
        ImageIcon testIcon13 = (ImageIcon) MakerLabel13.getIcon();
        
        //for the 1st card ///
        object_card ftcf = null , ftcs = null, ftct = null; //firstThreeCardsFirstCard
        object_card stcf = null , stcs = null , stct = null; // secondThreeCardsFirstCard
        object_card ttcf = null, ttcs = null , ttct = null; // thirdThreeCardsFirstCard
        object_card fftcf = null , fftcs = null, fftct = null; 
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage);
            //message.setIcon(tt);
             
            if (testIcon1.getImage() == tt.getImage()) {
                ftcf = carrd[i]; 
                break;
            }
        }
        
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage); 
            if (testIcon2.getImage() == tt.getImage()) {
                ftcs = carrd[i]; 
                break;
            }
        }
             
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage); 
            if (testIcon3.getImage() == tt.getImage()) {
                ftct = carrd[i]; 
                break;
            }
        }
        
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage);
            //message.setIcon(tt);
             
            if (testIcon4.getImage() == tt.getImage()) {
                stcf = carrd[i]; 
                break;
            }
        }
        
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage); 
            if (testIcon5.getImage() == tt.getImage()) {
                stcs = carrd[i]; 
                break;
            }
        }
             
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage); 
            if (testIcon6.getImage() == tt.getImage()) {
                stct = carrd[i]; 
                break;
            }
        }
        
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage);
            //message.setIcon(tt);
             
            if (testIcon7.getImage() == tt.getImage()) {
                ttcf = carrd[i]; 
                break;
            }
        }
        
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage); 
            if (testIcon8.getImage() == tt.getImage()) {
                ttcs = carrd[i]; 
                break;
            }
        }
             
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage); 
            if (testIcon9.getImage() == tt.getImage()) {
                ttct = carrd[i]; 
                break;
            }
        }
             
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage); 
            if (testIcon10.getImage() == tt.getImage()) {
                fftcf = carrd[i]; 
                break;
            }
        }
             
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage); 
            if (testIcon11.getImage() == tt.getImage()) {
                fftcs = carrd[i]; 
                break;
            }
        }
             
        for (int i = 0; i < 52; i++) {
            ImageIcon tt = new ImageIcon (carrd[i].bufferedimage); 
            if (testIcon12.getImage() == tt.getImage()) {
                fftct = carrd[i]; 
                break;
            }
        }
        threeCard1 = new ThreeCard (ftcf , ftcs , ftct);
        threeCard2 = new ThreeCard (stcf , stcs , stct);
        threeCard3 = new ThreeCard (ttcf , ttcs , ttct);
        threeCard4 = new ThreeCard (fftcf , fftcs , fftct); 
        System.out.println ("first 3 card .... "); 
        System.out.println (threeCard1.first_card.name + " " + threeCard1.first_card.suit + " " + threeCard1.first_card.value);
        System.out.println (threeCard1.second_card.name + " " + threeCard1.second_card.suit + " " + threeCard1.second_card.value);
        System.out.println (threeCard1.third_card.name + " " + threeCard1.third_card.suit + " " + threeCard1.third_card.value);
        System.out.println ("second 3 card .... "); 
        System.out.println (threeCard2.first_card.name + " " + threeCard2.first_card.suit + " " + threeCard2.first_card.value);
        System.out.println (threeCard2.second_card.name + " " + threeCard2.second_card.suit + " " + threeCard2.second_card.value);
        System.out.println (threeCard2.third_card.name + " " + threeCard2.third_card.suit + " " + threeCard2.third_card.value);
        System.out.println ("second 3 card .... "); 
        System.out.println (threeCard3.first_card.name + " " + threeCard3.first_card.suit + " " + threeCard3.first_card.value);
        System.out.println (threeCard3.second_card.name + " " + threeCard3.second_card.suit + " " + threeCard3.second_card.value);
        System.out.println (threeCard3.third_card.name + " " + threeCard3.third_card.suit + " " + threeCard3.third_card.value);
        System.out.println (""); 
        /**
        ThreeCard largest = null , larger = null , large = null; **/
        array[0] = threeCard1;
        array[1] = threeCard2; 
        array[2] = threeCard3;
        array[3] = threeCard4; /**
        ThreeCard arr [] = new ThreeCard [3]; 
        ValueFromChecker vc = new ValueFromChecker (array[0] , array[1]);
        ThreeCard ffff = vc.MaxThreeCard(); 
        ValueFromChecker vcc = new ValueFromChecker (ffff , array[2]);
        ThreeCard newt = null; 
        newt = vcc.MaxThreeCard(); 
        largest = newt; 
        int index = 0; 
        for (int i = 0; i < 3; i++) {
            if (array[i] != largest) {
                arr[index++] = array[i];   
            }
        }
        ValueFromChecker vccc = new ValueFromChecker (arr[0] , arr[1]); 
        ThreeCard hh = null; 
        hh = vccc.MaxThreeCard(); 
        if (hh == arr[0]) {
            larger = arr[0]; 
            large = arr[1]; 
        }
        else {
            larger = arr[1]; 
            large = arr[0]; 
        }
        
        array[0] = largest; 
        array[1] = larger; 
        array[2] = large;
        **/
        /// customize sort of object threeCard array in decending order ///
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 3; j++) {
                ValueFromChecker temp = new ValueFromChecker (array[j] , array[j + 1]); 
                ThreeCard tempValue = temp.MaxThreeCard(); 
                if (tempValue == array[j + 1]) {
                    array[j + 1] = array[j]; 
                    array[j] = tempValue;
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
        
    }//GEN-LAST:event_jButton2MouseEntered
    private void putEmptyCard (ThreeCard threeCard) throws IOException {
        ImageIcon ftt = new ImageIcon (threeCard.first_card.bufferedimage);
        ImageIcon stt = new ImageIcon (threeCard.second_card.bufferedimage); 
        ImageIcon ttt = new ImageIcon (threeCard.third_card.bufferedimage);
        ImageIcon icon__ [] = new ImageIcon [4];
        icon__[0] = ftt; 
        icon__[1] = stt;
        icon__[2] = ttt;
        ImageIcon stIcon = new ImageIcon (ImageIO.read(new File ("Capture.PNG")));
        ImageIcon ml1 = (ImageIcon) MakerLabel1.getIcon();
        ImageIcon ml2 = (ImageIcon) MakerLabel2.getIcon();
        ImageIcon ml3 = (ImageIcon) MakerLabel3.getIcon();
        ImageIcon ml4 = (ImageIcon) MakerLabel4.getIcon();
        ImageIcon ml5 = (ImageIcon) MakerLabel5.getIcon();
        ImageIcon ml6 = (ImageIcon) MakerLabel6.getIcon();
        ImageIcon ml7 = (ImageIcon) MakerLabel7.getIcon();
        ImageIcon ml8 = (ImageIcon) MakerLabel8.getIcon();
        ImageIcon ml9 = (ImageIcon) MakerLabel9.getIcon();
        ImageIcon ml10 = (ImageIcon) MakerLabel10.getIcon();
        ImageIcon ml11 = (ImageIcon) MakerLabel11.getIcon();
        ImageIcon ml12 = (ImageIcon) MakerLabel12.getIcon();
        ImageIcon ml13 = (ImageIcon) MakerLabel13.getIcon();
        
        for (int i = 0; i < 3; i++) {
            if (icon__[i].getImage() == ml1.getImage()) {
                MakerLabel1.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml2.getImage()) {
                //ImageIcon ml2 = (ImageIcon) MakerLabel2.getIcon(); 
                MakerLabel2.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml3.getImage()) {
                MakerLabel3.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml4.getImage()) {
                MakerLabel4.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml5.getImage()) {
                MakerLabel5.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml6.getImage()) {
                MakerLabel6.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml7.getImage()) {
                MakerLabel7.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml8.getImage()) {
                MakerLabel8.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml9.getImage()) {
                MakerLabel9.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml10.getImage()) {
                MakerLabel10.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml11.getImage()) {
                MakerLabel11.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml12.getImage()) {
                MakerLabel12.setIcon(stIcon);
            }
            else if (icon__[i].getImage() == ml13.getImage()) {
                MakerLabel13.setIcon(stIcon);
            }
        }
    }
    
    public int northPoint , userPoint , eastPoint , westPoint;
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //ValueFromChecker vchecker = new
        
        Thread wait_ = new Thread () {
            public void run () {
                if (counter == 0) {
                    int FirstRoundPoint = 0 ;
                    /// user's card 
                    myFirstThreeCardLabelNo1.setIcon(new ImageIcon (array[0].first_card.bufferedimage));
                    myFirstThreeCardLabelNo2.setIcon(new ImageIcon (array[0].second_card.bufferedimage));
                    myFirstThreeCardLabelNo3.setIcon(new ImageIcon (array[0].third_card.bufferedimage));
                    
                    // point calculation //
                    FirstRoundPoint += array[0].first_card.point; 
                    FirstRoundPoint += array[0].second_card.point; 
                    FirstRoundPoint += array[0].third_card.point;
                    
                    try { 
                        putEmptyCard (array[0]);
                        sleep (1000); 
                    } catch (IOException ex) {
                        Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    // east side 
                    EastChalLabelT.setIcon(new ImageIcon (carrd[CardDistribution[0][0] - 1].bufferedimage));
                    EastChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[0][1] - 1].bufferedimage));
                    EastChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[0][2] - 1].bufferedimage));
                    
                    FirstRoundPoint += carrd[CardDistribution[0][0] - 1].point; 
                    FirstRoundPoint += carrd[CardDistribution[0][1] - 1].point; 
                    FirstRoundPoint += carrd[CardDistribution[0][2] - 1].point; 
                    
                    try {
                        sleep (1000); 
                    }catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    /// North side
                    NorthChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[1][0] - 1].bufferedimage));
                    NorthChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[1][1] - 1].bufferedimage));
                    NorthChalLabel3.setIcon(new ImageIcon (carrd[CardDistribution[1][2] - 1].bufferedimage));
                    
                    FirstRoundPoint += carrd[CardDistribution[1][0] - 1].point; 
                    FirstRoundPoint += carrd[CardDistribution[1][1] - 1].point; 
                    FirstRoundPoint += carrd[CardDistribution[1][2] - 1].point; 
                    
                    
                    try {
                        sleep (1000); 
                    }catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    // west side
                    WestChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[2][0] - 1].bufferedimage));
                    WestChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[2][1] - 1].bufferedimage));
                    WestChalLabel3.setIcon(new ImageIcon (carrd[CardDistribution[2][2] - 1].bufferedimage));
                    
                    
                    FirstRoundPoint += carrd[CardDistribution[2][0] - 1].point; 
                    FirstRoundPoint += carrd[CardDistribution[2][1] - 1].point; 
                    FirstRoundPoint += carrd[CardDistribution[2][2] - 1].point; 
                    
                    
                    System.out.println ("enter"); 
                    /**
                     * here i will find which player will take the lead ...
                     * for this i will sort the four three card (of course it will be in decending order ) 
                     * then i will chose who gets the largest;
                     */
                    
                    ThreeCard strray[] = new ThreeCard [5]; ///  array to sort;
                    strray[0] = array[0];
                    strray[1] = new ThreeCard (carrd[CardDistribution[0][0] - 1], carrd[CardDistribution[0][1] - 1], carrd[CardDistribution[0][2] - 1]); 
                    strray[2] = new ThreeCard (carrd[CardDistribution[1][0] - 1], carrd[CardDistribution[1][1] - 1], carrd[CardDistribution[1][2] - 1]); 
                    strray[3] = new ThreeCard (carrd[CardDistribution[2][0] - 1], carrd[CardDistribution[2][1] - 1], carrd[CardDistribution[2][2] - 1]); 
                    ThreeCard trray [] = new ThreeCard [5]; /// temporary array to check out;
                    for (int i = 0; i < 4; i++) {
                        trray[i] = strray[i];
                    }
                    Sort = new ThreeCardSort  (strray);
                   
                    
                    int chosenIndex = 0 ; 
                    for (int i = 0; i < 4; i++) {
                       if (strray[0] == trray[i]) {
                           chosenIndex = i; /// found the person who got the lead;
                           break;
                       } 
                    }
                    /**
                     * player     code        imageIcon
                     * user       0           arrowDown
                     * East       1           arrowRight
                     * North      2           arrowUp
                     * West       3           arrowLeft
                     */
                    Direction.setText("comparing...");
                    
                    try {
                        sleep(500); 
                    } catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    Direction.setText(null);
                    if (chosenIndex == 0) {
                        System.out.println ("user took the lead and has gotten point = " + FirstRoundPoint);
                        userPoint += FirstRoundPoint; 
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowDown.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else if (chosenIndex == 1) {
                        System.out.println ("East took the lead and has gotten point = " + FirstRoundPoint);
                        eastPoint += FirstRoundPoint; 
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowRight.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else if (chosenIndex == 2) {
                        System.out.println ("Nort took the leadand has gotten point = " + FirstRoundPoint);
                        northPoint += FirstRoundPoint; 
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowUp.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else {
                        System.out.println ("West took the leadand has gotten point = " + FirstRoundPoint);
                        westPoint += FirstRoundPoint; 
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowLeft.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    System.out.println ("chosen index is " + chosenIndex);
                    System.out.println (strray[0].first_card.name +  " " + strray[0].first_card.suit);
                    System.out.println (strray[0].second_card.name +  " " + strray[0].second_card.suit);
                    System.out.println (strray[0].third_card.name +  " " + strray[0].third_card.suit);
                    
                    System.out.println (trray[chosenIndex].first_card.name +  " " + trray[chosenIndex].first_card.suit);
                    System.out.println (trray[chosenIndex].second_card.name +  " " + trray[chosenIndex].second_card.suit);
                    System.out.println (trray[chosenIndex].third_card.name +  " " + trray[chosenIndex].third_card.suit);
                }
                else if (counter == 1) {
                    myFirstThreeCardLabelNo1.setIcon(new ImageIcon (array[1].first_card.bufferedimage));
                    myFirstThreeCardLabelNo2.setIcon(new ImageIcon (array[1].second_card.bufferedimage));
                    myFirstThreeCardLabelNo3.setIcon(new ImageIcon (array[1].third_card.bufferedimage));
                    
                    int SecondRoundPoint = 0; 
                    
                    SecondRoundPoint += array[1].first_card.point; 
                    SecondRoundPoint += array[1].second_card.point;
                    SecondRoundPoint += array[1].third_card.point;
                    
                    try {
                        putEmptyCard (array[1]);
                        sleep (1000); 
                    } catch (IOException ex) {
                        Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null , ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    EastChalLabelT.setIcon(new ImageIcon (carrd[CardDistribution[0][3] - 1].bufferedimage));
                    EastChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[0][4] - 1].bufferedimage));
                    EastChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[0][5] - 1].bufferedimage));

                    
                    SecondRoundPoint += carrd[CardDistribution[0][3] - 1].point; 
                    SecondRoundPoint += carrd[CardDistribution[0][4] - 1].point; 
                    SecondRoundPoint += carrd[CardDistribution[0][5] - 1].point; 
                    
                    
                    try {
                        sleep (1000); 
                    }catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    NorthChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[1][3] - 1].bufferedimage));
                    NorthChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[1][4] - 1].bufferedimage));
                    NorthChalLabel3.setIcon(new ImageIcon (carrd[CardDistribution[1][5] - 1].bufferedimage));
                    
                    
                    SecondRoundPoint += carrd[CardDistribution[1][3] - 1].point; 
                    SecondRoundPoint += carrd[CardDistribution[1][4] - 1].point; 
                    SecondRoundPoint += carrd[CardDistribution[1][5] - 1].point; 
                    
                    try {
                        sleep (1000); 
                    }catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    WestChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[2][3] - 1].bufferedimage));
                    WestChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[2][4] - 1].bufferedimage));
                    WestChalLabel3.setIcon(new ImageIcon (carrd[CardDistribution[2][5] - 1].bufferedimage));
                    
                    
                    SecondRoundPoint += carrd[CardDistribution[2][3] - 1].point; 
                    SecondRoundPoint += carrd[CardDistribution[2][4] - 1].point; 
                    SecondRoundPoint += carrd[CardDistribution[2][5] - 1].point; 
                    
                    
                    /**
                     * here i will find which player will take the lead ...
                     * for this i will sort the four three card (of course it will be in decending order ) 
                     * then i will chose who gets the largest;
                     */
                    
                    ThreeCard strray[] = new ThreeCard [5]; ///  array to sort;
                    strray[0] = array[1];
                    strray[1] = new ThreeCard (carrd[CardDistribution[0][3] - 1], carrd[CardDistribution[0][4] - 1], carrd[CardDistribution[0][5] - 1]); 
                    strray[2] = new ThreeCard (carrd[CardDistribution[1][3] - 1], carrd[CardDistribution[1][4] - 1], carrd[CardDistribution[1][5] - 1]); 
                    strray[3] = new ThreeCard (carrd[CardDistribution[2][3] - 1], carrd[CardDistribution[2][4] - 1], carrd[CardDistribution[2][5] - 1]); 
                    ThreeCard trray [] = new ThreeCard [5]; /// temporary array to check out;
                    for (int i = 0; i < 4; i++) {
                        trray[i] = strray[i];
                    }
                    Sort = new ThreeCardSort  (strray);
                   
                    
                    int chosenIndex = 0 ; 
                    for (int i = 0; i < 4; i++) {
                       if (strray[0] == trray[i]) {
                           chosenIndex = i; /// found the person who got the lead;
                           break;
                       } 
                    }
                    
                    /**
                     * player     code        imageIcon
                     * user       0           arrowDown
                     * East       1           arrowRight
                     * North      2           arrowUp
                     * West       3           arrowLeft
                     */
                    
                    Direction.setText("comparing...");
                    
                    try {
                        sleep(500); 
                    } catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    Direction.setText(null);
                    if (chosenIndex == 0) {
                        System.out.println ("user took the lead and has gotten point = " + SecondRoundPoint );
                        userPoint += SecondRoundPoint;
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowDown.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else if (chosenIndex == 1) {
                        System.out.println ("East took the lead and has gotten point = " + SecondRoundPoint);
                        eastPoint += SecondRoundPoint;
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowRight.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else if (chosenIndex == 2) {
                        System.out.println ("Nort took the lead and has gotten point = " + SecondRoundPoint);
                        northPoint += SecondRoundPoint;
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowUp.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else {
                        westPoint += SecondRoundPoint;
                        System.out.println ("West took the lead and has gotten point = " + SecondRoundPoint);
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowLeft.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                else if (counter == 2) {
                    int ThirdRoundPoint = 0; 
                    myFirstThreeCardLabelNo1.setIcon(new ImageIcon (array[2].first_card.bufferedimage));
                    myFirstThreeCardLabelNo2.setIcon(new ImageIcon (array[2].second_card.bufferedimage));
                    myFirstThreeCardLabelNo3.setIcon(new ImageIcon (array[2].third_card.bufferedimage));
                    
                    ThirdRoundPoint += array[2].first_card.point; 
                    ThirdRoundPoint += array[2].second_card.point;
                    ThirdRoundPoint += array[2].third_card.point;
                    
                    try { 
                        putEmptyCard (array[2]);
                        sleep (1000); 
                    } catch (IOException ex) {
                        Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    EastChalLabelT.setIcon(new ImageIcon (carrd[CardDistribution[0][6] - 1].bufferedimage));
                    EastChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[0][7] - 1].bufferedimage));
                    EastChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[0][8] - 1].bufferedimage));
                    
                    
                    ThirdRoundPoint += carrd[CardDistribution[0][6] - 1].point; 
                    ThirdRoundPoint += carrd[CardDistribution[0][7] - 1].point; 
                    ThirdRoundPoint += carrd[CardDistribution[0][8] - 1].point; 
                    
                    
                    try {
                        sleep (1000); 
                    }catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    NorthChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[1][6] - 1].bufferedimage));
                    NorthChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[1][7] - 1].bufferedimage));
                    NorthChalLabel3.setIcon(new ImageIcon (carrd[CardDistribution[1][8] - 1].bufferedimage));
                    
                    
                    ThirdRoundPoint += carrd[CardDistribution[1][6] - 1].point; 
                    ThirdRoundPoint += carrd[CardDistribution[1][7] - 1].point; 
                    ThirdRoundPoint += carrd[CardDistribution[1][8] - 1].point; 
                    
                    try {
                        sleep (1000); 
                    }catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    WestChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[2][6] - 1].bufferedimage));
                    WestChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[2][7] - 1].bufferedimage));
                    WestChalLabel3.setIcon(new ImageIcon (carrd[CardDistribution[2][8] - 1].bufferedimage));
                    
                    
                    ThirdRoundPoint += carrd[CardDistribution[2][6] - 1].point; 
                    ThirdRoundPoint += carrd[CardDistribution[2][7] - 1].point; 
                    ThirdRoundPoint += carrd[CardDistribution[2][8] - 1].point; 
                    
                    
                    /**
                     * here i will find which player will take the lead ...
                     * for this i will sort the four three card (of course it will be in decending order ) 
                     * then i will chose who gets the largest;
                     */
                    
                    ThreeCard strray[] = new ThreeCard [5]; ///  array to sort;
                    strray[0] = array[2];
                    strray[1] = new ThreeCard (carrd[CardDistribution[0][6] - 1], carrd[CardDistribution[0][7] - 1], carrd[CardDistribution[0][8] - 1]); 
                    strray[2] = new ThreeCard (carrd[CardDistribution[1][6] - 1], carrd[CardDistribution[1][7] - 1], carrd[CardDistribution[1][8] - 1]); 
                    strray[3] = new ThreeCard (carrd[CardDistribution[2][6] - 1], carrd[CardDistribution[2][7] - 1], carrd[CardDistribution[2][8] - 1]); 
                    ThreeCard trray [] = new ThreeCard [5]; /// temporary array to check out;
                    for (int i = 0; i < 4; i++) {
                        trray[i] = strray[i];
                    }
                    Sort = new ThreeCardSort  (strray);
                   
                    
                    int chosenIndex = 0 ; 
                    for (int i = 0; i < 4; i++) {
                       if (strray[0] == trray[i]) {
                           chosenIndex = i; /// found the person who got the lead;
                           break;
                       } 
                    }
                    /**
                     * player     code        imageIcon
                     * user       0           arrowDown
                     * East       1           arrowRight
                     * North      2           arrowUp
                     * West       3           arrowLeft
                     */
                    
                    Direction.setText("comparing...");
                    
                    try {
                        sleep(500); 
                    } catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    Direction.setText(null);
                    if (chosenIndex == 0) {
                        System.out.println ("user took the lead and get point ==" + ThirdRoundPoint);
                        userPoint += ThirdRoundPoint; 
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowDown.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else if (chosenIndex == 1) {
                        System.out.println ("East took the leadand get point ==" + ThirdRoundPoint);
                        eastPoint += ThirdRoundPoint; 
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowRight.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else if (chosenIndex == 2) {
                        System.out.println ("Nort took the lead and get point ==" + ThirdRoundPoint);
                        northPoint += ThirdRoundPoint; 
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowUp.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else {
                        System.out.println ("West took the lead and get point ==" + ThirdRoundPoint);
                        westPoint += ThirdRoundPoint;
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowLeft.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                else if (counter == 3) {
                    myFirstThreeCardLabelNo1.setIcon(new ImageIcon (array[3].first_card.bufferedimage));
                    myFirstThreeCardLabelNo2.setIcon(new ImageIcon (array[3].second_card.bufferedimage));
                    myFirstThreeCardLabelNo3.setIcon(new ImageIcon (array[3].third_card.bufferedimage));
                    ImageIcon II = (ImageIcon) MakerLabel13.getIcon();
                    myFirstThreeCardLabelNo.setIcon(II);
                    
                    int FourthRoundPoint = 0; 
                    
                    FourthRoundPoint += array[3].first_card.point;
                    FourthRoundPoint += array[3].second_card.point;
                    FourthRoundPoint += array[3].third_card.point;
                    //FourthRoundPoint += carrd[CardDistribution[3][12] - 1].point
                    /*** find the extra card which is necessary for the point **/
                                int exPoint = 0;
                    for (int i = 0; i < 13; i++) {
                        ImageIcon ii = new ImageIcon (carrd [CardDistribution[3][i] - 1].bufferedimage);
                        if (II.getImage() == ii.getImage()) {
                            exPoint = carrd[CardDistribution[3][i] - 1].point;
                            break;
                        }
                    }
                    FourthRoundPoint += exPoint;
                    
                    try {
                        MakerLabel13.setIcon(new ImageIcon (ImageIO.read(new File ("Capture.png"))));
                    } catch (IOException ex) {
                        Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        putEmptyCard (array[3]);
                        sleep (1000); 
                    } catch (IOException ex) {
                        Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    EastChalLabelT.setIcon(null);
                    EastChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[0][9] - 1].bufferedimage));
                    EastChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[0][10] - 1].bufferedimage));
                    EastLabel.setIcon(new ImageIcon (carrd[CardDistribution[0][11] - 1].bufferedimage));
                    EastChalLabel.setIcon(new ImageIcon (carrd[CardDistribution[0][12] - 1].bufferedimage));
                    
                    try {
                        sleep (1000);  /// wait for 1 s;
                    }catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    NorthChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[1][9] - 1].bufferedimage));
                    NorthChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[1][10] - 1].bufferedimage));
                    NorthChalLabel3.setIcon(new ImageIcon (carrd[CardDistribution[1][11] - 1].bufferedimage));
                    NorthChalLabel.setIcon(new ImageIcon (carrd[CardDistribution[1][12] - 1].bufferedimage));
                    try {
                        sleep (1000); 
                    }catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    WestChalLabel1.setIcon(new ImageIcon (carrd[CardDistribution[2][9] - 1].bufferedimage));
                    WestChalLabel2.setIcon(new ImageIcon (carrd[CardDistribution[2][10] - 1].bufferedimage));
                    WestChalLabel3.setIcon(new ImageIcon (carrd[CardDistribution[2][11] - 1].bufferedimage));
                    WestChalLabel.setIcon(new ImageIcon (carrd[CardDistribution[2][12] - 1].bufferedimage));
                    
                    for (int i = 0; i < 3; i++) {
                        for (int j = 9; j <= 12; j++) {
                            FourthRoundPoint += carrd[CardDistribution[i][j] - 1].point;
                        }
                    }
                    
                    /**
                     * here i will find which player will take the lead ...
                     * for this i will sort the four three card (of course it will be in decending order ) 
                     * then i will chose who gets the largest;
                     */
                    
                    ThreeCard strray[] = new ThreeCard [5]; ///  array to sort;
                    strray[0] = array[3];
                    strray[1] = new ThreeCard (carrd[CardDistribution[0][9] - 1], carrd[CardDistribution[0][10] - 1], carrd[CardDistribution[0][11] - 1]); 
                    strray[2] = new ThreeCard (carrd[CardDistribution[1][9] - 1], carrd[CardDistribution[1][10] - 1], carrd[CardDistribution[1][11] - 1]); 
                    strray[3] = new ThreeCard (carrd[CardDistribution[2][9] - 1], carrd[CardDistribution[2][10] - 1], carrd[CardDistribution[2][11] - 1]); 
                    ThreeCard trray [] = new ThreeCard [5]; /// temporary array to check out;
                    for (int i = 0; i < 4; i++) {
                        trray[i] = strray[i];
                    }
                    Sort = new ThreeCardSort  (strray);
                   
                    
                    int chosenIndex = 0 ; 
                    for (int i = 0; i < 4; i++) {
                       if (strray[0] == trray[i]) {
                           chosenIndex = i; /// found the person who got the lead;
                           break;
                       } 
                    }
                    /**
                     * player     code        imageIcon
                     * user       0           arrowDown
                     * East       1           arrowRight
                     * North      2           arrowUp
                     * West       3           arrowLeft
                     */
                    
                    Direction.setText("comparing...");
                    
                    try {
                        sleep(500); 
                    } catch (Exception ee) {
                        ee.printStackTrace();
                    }
                    Direction.setText(null);
                    
                    if (chosenIndex == 0) {
                        System.out.println ("user took the lead and get point = " + FourthRoundPoint);
                        userPoint += FourthRoundPoint ; 
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowDown.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else if (chosenIndex == 1) {
                        System.out.println ("East took the lead and get point = " + FourthRoundPoint);
                        eastPoint += FourthRoundPoint ;
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowRight.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else if (chosenIndex == 2) {
                        System.out.println ("Nort took the lead and get point = " + FourthRoundPoint);
                        northPoint += FourthRoundPoint;
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowUp.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else {
                        System.out.println ("West took the lead and get point = " + FourthRoundPoint);
                        westPoint += FourthRoundPoint;
                        try {
                            Direction.setIcon(new ImageIcon (ImageIO.read(new File ("arrowLeft.png"))));
                        } catch (IOException ex) {
                            Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    ShowScoreBoard (); 
                }
                counter++;
                
            }
        }; 
        wait_.start();
    }//GEN-LAST:event_jButton3ActionPerformed
    ScoreBoard sb = new ScoreBoard ();
    private void ShowScoreBoard () {
        sb.ShowOnList(userPoint , eastPoint , northPoint , westPoint);
        sb.setVisible(true);
        
        add (sb);
                
    }
    
    private void kMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_kMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_kMouseDragged

    private void JMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_JMouseDragged

    private void LMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_LMouseDragged

    private void testludMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testludMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_testludMouseDragged

    private void MakerLabel12MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel12MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_MakerLabel12MouseDragged

    private void MakerLabel11MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel11MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_MakerLabel11MouseDragged

    private void MakerLabel10MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel10MouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_MakerLabel10MouseDragged

    private void mMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mMouseDragged
        JComponent jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = jcomp.getTransferHandler(); 
        thand.exportAsDrag(jcomp, evt, TransferHandler.MOVE);
        
    }//GEN-LAST:event_mMouseDragged

    private void MakerLabel13MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MakerLabel13MouseDragged
        JComponent Jcomp = (JComponent) evt.getSource(); 
        TransferHandler thand = Jcomp.getTransferHandler(); 
        thand.exportAsDrag(Jcomp, evt, TransferHandler.MOVE);
    }//GEN-LAST:event_MakerLabel13MouseDragged
    private int index_1st_East , index_2nd_East , index_3rd_East , index_4th_East , index_5th_East , index_6th_East , index_7th_East;
    private int index_8th_East , index_9th_East , index_10th_East , index_11th_East , index_12th_East , index_13th_East;
    private int CardDistribution[][] = new int[5][15]; 
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Integer [] arra = new Integer[] {
            1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 
            14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 
            25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 
            37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 51 , 52 
        };
        Collections.shuffle(Arrays.asList (arra));
                   for (int i = 0; i < 4; i++) {
                       for (int j = 0; j < 13; j++) {
                           CardDistribution[i][j] = arra[(j * 4) + i];
                           int index = CardDistribution[i][j] - 1;
                        object_card tt = carrd[index]; 
                        System.out.println (tt.name + " " + tt.suit + " " + tt.value + " " + tt.point);
                       
                       }
                       System.out.println (); 
                   } 
                   for (int i = 0; i < 13; i++) {
                       int index = CardDistribution[0][i] - 1;
                       object_card tt = carrd[index]; 
                       System.out.println (tt.name + " " + tt.suit + " " + tt.value + " " + tt.point);
                       
                   }
                    object_card one = carrd[CardDistribution[3][0] - 1]; 
                    object_card two = carrd[CardDistribution[3][1] - 1];
                    object_card three = carrd[CardDistribution[3][2] - 1]; 

                    object_card four = carrd[CardDistribution[3][3] - 1]; 
                    object_card five = carrd[CardDistribution[3][4] - 1];
                    object_card six = carrd[CardDistribution[3][5] - 1]; 

                    object_card seven = carrd[CardDistribution[3][6] - 1]; 
                    object_card eight = carrd[CardDistribution[3][7] - 1];
                    object_card nine = carrd[CardDistribution[3][8] - 1]; 
                    
                    object_card ten = carrd[CardDistribution[3][9] - 1]; 
                    object_card eleven = carrd[CardDistribution[3][10] - 1]; 
                    object_card twelve = carrd[CardDistribution[3][11] - 1]; 
                    object_card thirteen = carrd[CardDistribution[3][12] - 1]; 
                    
                    a.setIcon(new ImageIcon (one.bufferedimage));
                    b.setIcon(new ImageIcon (two.bufferedimage));
                    c.setIcon(new ImageIcon (three.bufferedimage));
                    d.setIcon(new ImageIcon (four.bufferedimage));
                    e.setIcon(new ImageIcon (five.bufferedimage));
                    f.setIcon(new ImageIcon (six.bufferedimage));
                    g.setIcon(new ImageIcon (seven.bufferedimage));
                    h.setIcon(new ImageIcon (eight.bufferedimage));
                    i.setIcon(new ImageIcon (nine.bufferedimage));
                    J.setIcon(new ImageIcon (ten.bufferedimage));
                    k.setIcon(new ImageIcon (eleven.bufferedimage));
                    L.setIcon(new ImageIcon (twelve.bufferedimage));
                    m.setIcon(new ImageIcon (thirteen.bufferedimage));
                    
    }//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(myGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(myGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(myGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(myGameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new myGameFrame().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(myGameFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Direction;
    private javax.swing.JLabel EastChalLabel;
    private javax.swing.JLabel EastChalLabel1;
    private javax.swing.JLabel EastChalLabel2;
    private javax.swing.JLabel EastChalLabelT;
    private javax.swing.JLabel EastLabel;
    private javax.swing.JLabel J;
    private javax.swing.JLabel L;
    private javax.swing.JLabel MakerLabel1;
    private javax.swing.JLabel MakerLabel10;
    private javax.swing.JLabel MakerLabel11;
    private javax.swing.JLabel MakerLabel12;
    private javax.swing.JLabel MakerLabel13;
    private javax.swing.JLabel MakerLabel2;
    private javax.swing.JLabel MakerLabel3;
    private javax.swing.JLabel MakerLabel4;
    private javax.swing.JLabel MakerLabel5;
    private javax.swing.JLabel MakerLabel6;
    private javax.swing.JLabel MakerLabel7;
    private javax.swing.JLabel MakerLabel8;
    private javax.swing.JLabel MakerLabel9;
    private javax.swing.JLabel NL;
    private javax.swing.JLabel Na;
    private javax.swing.JLabel Nb;
    private javax.swing.JLabel Nc;
    private javax.swing.JLabel Nd;
    private javax.swing.JLabel Ne;
    private javax.swing.JLabel Nf;
    private javax.swing.JLabel Ng;
    private javax.swing.JLabel Nh;
    private javax.swing.JLabel Ni;
    private javax.swing.JLabel Nj;
    private javax.swing.JLabel Nm;
    private javax.swing.JLabel Nn;
    private javax.swing.JLabel NorthChalLabel;
    private javax.swing.JLabel NorthChalLabel1;
    private javax.swing.JLabel NorthChalLabel2;
    private javax.swing.JLabel NorthChalLabel3;
    private javax.swing.JLabel WestChalLabel;
    private javax.swing.JLabel WestChalLabel1;
    private javax.swing.JLabel WestChalLabel2;
    private javax.swing.JLabel WestChalLabel3;
    private javax.swing.JLabel a;
    private javax.swing.JLabel b;
    private javax.swing.JLabel c;
    private javax.swing.JLabel d;
    private javax.swing.JLabel e;
    private javax.swing.JLabel ea;
    private javax.swing.JLabel eb;
    private javax.swing.JLabel ec;
    private javax.swing.JLabel ed;
    private javax.swing.JLabel ee;
    private javax.swing.JLabel ef;
    private javax.swing.JLabel eg;
    private javax.swing.JLabel eh;
    private javax.swing.JLabel ei;
    private javax.swing.JLabel ej;
    private javax.swing.JLabel ek;
    private javax.swing.JLabel el;
    private javax.swing.JLabel em;
    private javax.swing.JLabel f;
    private javax.swing.JLabel g;
    private javax.swing.JLabel h;
    private javax.swing.JLabel i;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel k;
    private javax.swing.JLabel m;
    private javax.swing.JLabel myFirstThreeCardLabelNo;
    private javax.swing.JLabel myFirstThreeCardLabelNo1;
    private javax.swing.JLabel myFirstThreeCardLabelNo2;
    private javax.swing.JLabel myFirstThreeCardLabelNo3;
    private javax.swing.JLabel testllr;
    private javax.swing.JLabel testlud;
    private javax.swing.JLabel wL;
    private javax.swing.JLabel wa;
    private javax.swing.JLabel wb;
    private javax.swing.JLabel wc;
    private javax.swing.JLabel wd;
    private javax.swing.JLabel we;
    private javax.swing.JLabel wf;
    private javax.swing.JLabel wh;
    private javax.swing.JLabel wi;
    private javax.swing.JLabel wj;
    private javax.swing.JLabel wk;
    private javax.swing.JLabel wm;
    private javax.swing.JLabel wn;
    // End of variables declaration//GEN-END:variables
}
